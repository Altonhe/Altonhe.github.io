<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/05/07/hello-world/"/>
      <url>/2020/05/07/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="不积硅步，无以致千里"><a href="#不积硅步，无以致千里" class="headerlink" title="不积硅步，无以致千里"></a>不积硅步，无以致千里</h1><p>终于开启了我的blog计划，之前在高中的时候曾经建过wp的站，后来也不了了之，希望这一次可以坚持下来吧</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在手机上访问discord和pixiv的正确姿势</title>
      <link href="/2020/04/08/zai-shou-ji-shang-fang-wen-discord-he-pixiv-de-zheng-que-zi-shi/"/>
      <url>/2020/04/08/zai-shou-ji-shang-fang-wen-discord-he-pixiv-de-zheng-que-zi-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>这几天，我的开源项目的总star终于达到两位数了，感谢协会和DMR的朋友们！</strong></p><p>==============================================================================</p><p>steamcommunity在很早是可以直接上的，后来由于种种原因被墙了，pixiv也是，在之前我都是通过改hosts的，后来墙的升级使得这条路也走不通了，知道有一天我看到这个程序</p><p>![image-20200408164049367](C:\Users\hp pavilion x360 14\AppData\Roaming\Typora\typora-user-images\image-20200408164049367.png)</p><p>羽翼城大佬的本地反代给了我解决这个问题的启发，具体原理他在<a href="https://keylol.com/t421740-1-1" target="_blank" rel="noopener">keylol</a>的一篇文章里说的很清楚</p><blockquote><p>众所周知上个月底开始某国服网升级了 SNI 过滤， steam community 不能再直连。目前论坛的应对措施是用服务器中转<br>其实解决方法很简单，不要把 SNI 暴露出来即可<br>steam community 用的 Akamai CDN，因此理论上可以使用任意一个 Akamai IP<br>执行以下 cURL 命令，国服网看到的 SNI 域名只是 whatismyip.akamai.com ，HTTP Host 字段是加密的</p><pre class=" language-shell"><code class="language-shell">$ curl -kI https://whatismyip.akamai.com -H 'Host: steamcommunity.com'HTTP/1.1 200 OKServer: ApacheStrict-Transport-Security: max-age=3600X-Frame-Options: SAMEORIGINContent-Security-Policy: default-src blob: data: https: 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://steamcommunity-a.akamaihd.net/ https://api.steampowered.com/ https://cdn.steamstatic.com.8686c.com/steamcommunity/public/assets/ *.google-analytics.com https://www.google.com https://www.gstatic.com https://apis.google.com; object-src 'none'; connect-src 'self' https://api.steampowered.com/ https://store.steampowered.com/ wss://community.steam-api.com/websocket/ *.google-analytics.com http://127.0.0.1:27060 ws://127.0.0.1:27060; frame-src 'self' steam: https://store.steampowered.com/ https://www.youtube.com https://www.google.com https://sketchfab.com https://player.vimeo.com;Expires: Mon, 26 Jul 1997 05:00:00 GMTCache-Control: no-cacheContent-Type: text/html; charset=UTF-8Content-Length: 0Date: Thu, 06 Sep 2018 16:59:13 GMTConnection: keep-aliveSet-Cookie: sessionid=a9fbb2c80acba395937f0379; path=/; secureSet-Cookie: steamCountry=CN%7C7bd9b1104bda99d1d43c54ada6e49694; path=/; secure</code></pre><p>而我们不能修改 steam 客户端，于是可以在本地建反向代 理：</p><p>安装 nginx，监听 443 端口，自签证书和 CA；<br>设置 proxy_pass 代理到 Akamai CDN IP</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>   <span class="token keyword">listen</span> <span class="token number">443</span> <span class="token keyword">ssl</span><span class="token punctuation">;</span>   <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>       <span class="token keyword">proxy_pass</span> <span class="token keyword">https</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">/</span><span class="token punctuation">;</span>       <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>proxy_pass 是 IP 时， nginx 不会向外暴露 SNI，也就顺利绕过了 SNI 过滤<br>最后修改 hosts 指到 127.0.0.1 即可</p><p>理论上可以应用于所有 Akamai CDN 网站，以后就算主站被X了也可以这么操作<br>Windows 自带的 IIS 也可以代 理</p></blockquote><p>通过这个方法，羽翼城在他的steamcommunity302里面加了本地反代，可以解决discord，steam社区，twitch的问题，而<a href="https://github.com/mashirozx/Pixiv-Nginx" target="_blank" rel="noopener">Pixiv-Nginx</a>提供了解决pixiv访问的问题</p><p>有了规则，就是要在手机上跑起来了</p><p>magisk模块是一个都不错的解决方案，它可以实现我们要做的，caddy2最近也发布了，十分适合来做反代服务器，不过还有一个问题，那就是证书，自从安卓N以来，即使是用户安装的证书也不受信任，当然我们可以将证书安装到系统目录下，但是我即使安装到系统目录下，依旧提示我的证书不受信任，所以只能放大招了</p><p><a href="https://github.com/ViRb3/TrustMeAlready" target="_blank" rel="noopener">https://github.com/ViRb3/TrustMeAlready</a></p><p>使用trustmealready就可以一劳永逸的解决ssl验证（没有ssl验证就彻底解决了问题)</p><p>放几张图片</p><p><img src="/medias/RProxy/1.jpeg" alt="steam社区"></p><p><img src="/medias/RProxy/2.jpeg" alt="Pixiv"></p><p><img src="/medias/RProxy/3.jpeg" alt="Discord"></p><p>顺便放一下项目地址:<strong><a href="https://github.com/Altonhe/RProxy2" target="_blank" rel="noopener">RProxy2</a></strong>（觉得好用的可以给个star，多谢了）</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin中实现接口回调的研究（一）</title>
      <link href="/2020/03/14/kotlin-zhong-shi-xian-jie-kou-hui-diao-de-yan-jiu-yi/"/>
      <url>/2020/03/14/kotlin-zhong-shi-xian-jie-kou-hui-diao-de-yan-jiu-yi/</url>
      
        <content type="html"><![CDATA[<p>之前看到一句很著名的话“不要重复自己”，这也告诉了我们不要重复的造轮子，在Java中，我们可以通过接口回调来大幅简化我们的代码，并提升我们的代码可读性，而在kotlin里代码回调则要更具有一些kotlin“风味”，这里我们可以来写一个简单的例子</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> mBtn<span class="token operator">=</span><span class="token function">findViewByID</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>button<span class="token punctuation">)</span>mBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//do something</span><span class="token punctuation">}</span></code></pre><p>当这里只有一个按钮的时候，只需要这么设置即可，但是当存在多个按钮的时候</p><pre class=" language-kotlin"><code class="language-kotlin">        <span class="token keyword">val</span> mbtn1<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_1<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> mbtn2<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_2<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> mbtn3<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_3<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> mbtn4<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_4<span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> mbtn5<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_5<span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>        <span class="token keyword">val</span> mbtn6<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_6<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span></code></pre><p>这样写就太过于愚蠢了，首先我们如果旨在onCreate()方法里声明<code>button</code>,结果就是在这个函数外都无法使用，其次这样的代码可读性和维护性都非常低，是典型的面向过程，那如果我们定义一个函数来实现<code>onclick</code>呢？</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token keyword">val</span> mbtn1<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_1<span class="token punctuation">)</span>        <span class="token keyword">val</span> mbtn2<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_2<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//无法这么做，此时AS报错找不到mbtn*</span>        mbtn1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>所以这里是我们要做的第一个改变,即首先要声明我们的变量</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mBtn1<span class="token operator">:</span>Button    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mBtn2<span class="token operator">:</span>Button    ……    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        mbtn1<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_1<span class="token punctuation">)</span>        mbtn2<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_2<span class="token punctuation">)</span>        ……        <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mbtn1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// do something</span>        <span class="token punctuation">}</span>        ……    <span class="token punctuation">}</span></code></pre><p>但是就算这么写，也仅仅是做了个初级封装，这时就要用到kotlin的接口回调了</p><p><img src="https://img-blog.csdn.net/20150126131108789?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQveHdoXzEyMzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>这样，代码就可以重构成</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mBtn1<span class="token operator">:</span>Button    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> mBtn2<span class="token operator">:</span>Button    ……    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        mbtn1<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_1<span class="token punctuation">)</span>        mbtn2<span class="token operator">=</span>findViewById<span class="token operator">&lt;</span>Button<span class="token operator">></span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_2<span class="token punctuation">)</span>        ……        <span class="token function">setListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">setListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> onclick<span class="token operator">:</span>OnClick        mbtn1<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>onclick<span class="token punctuation">)</span>        mbtn2<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>onclick<span class="token punctuation">)</span>        ……    <span class="token punctuation">}</span>    <span class="token keyword">class</span> OnClick<span class="token operator">:</span> View<span class="token punctuation">.</span><span class="token function">OnClickListener</span><span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onClick</span><span class="token punctuation">(</span>v<span class="token operator">:</span> View<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">when</span><span class="token punctuation">(</span>v<span class="token operator">!!</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">{</span>                R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_1<span class="token operator">-></span>                <span class="token comment" spellcheck="true">// do something</span>                R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>btn_2<span class="token operator">-></span>                <span class="token comment" spellcheck="true">// do something</span>                ……                <span class="token keyword">else</span> <span class="token operator">-></span>                <span class="token comment" spellcheck="true">// do something</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这样，我们就实现了一个比较高级的封装，它可以大大提高我们代码的可维护性，这里第一期只是说了kotlin接口回调的一个小应用（毕竟我也在不断学习），但无论如何，发挥面向对象的优势是我们写出好代码的重中之重</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
